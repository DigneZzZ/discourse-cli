#!/usr/bin/env bash

# disco - Discourse Launcher Management Tool
# A convenient wrapper for managing Discourse with Telegram notifications
#
# GitHub: https://github.com/DigneZzZ/discourse-cli
# Installation: sudo cp disco /usr/local/bin/disco && sudo chmod +x /usr/local/bin/disco
# Usage: disco [command] [options] or just disco for interactive menu

VERSION="1.2.0"

DEFAULT_DISCOURSE_PATH="/var/discourse"
DEFAULT_CONFIG_NAME="app"

load_env() {
  local env_file=""
  
  if [[ -f "$HOME/.disco.env" ]]; then
    env_file="$HOME/.disco.env"
  elif [[ -f "/etc/disco/.env" ]]; then
    env_file="/etc/disco/.env"
  elif [[ -f "$(dirname "$0")/.env" ]]; then
    env_file="$(dirname "$0")/.env"
  elif [[ -f ".env" ]]; then
    env_file=".env"
  fi
  
  if [[ -n "$env_file" ]]; then
    export $(grep -v '^#' "$env_file" | grep -v '^$' | xargs)
  fi
}

load_env

DISCOURSE_PATH="${DISCOURSE_PATH:-$DEFAULT_DISCOURSE_PATH}"
LAUNCHER_PATH="${DISCOURSE_PATH}/launcher"
CONFIG_NAME="${CONFIG_NAME:-$DEFAULT_CONFIG_NAME}"

TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN:-}"
TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID:-}"
TELEGRAM_THREAD_ID="${TELEGRAM_THREAD_ID:-}"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m'

# Interactive menu settings
MENU_SELECTED=0
MENU_ITEMS=()
MENU_COMMANDS=()
MENU_REQUIRES_ROOT=()
MENU_REQUIRES_CONFIRM=()

send_telegram() {
  local message="$1"
  local silent="${2:-false}"
  
  if [[ -z "$TELEGRAM_BOT_TOKEN" || -z "$TELEGRAM_CHAT_ID" ]]; then
    return 0
  fi
  
  local base_params="chat_id=${TELEGRAM_CHAT_ID}&text=${message}&parse_mode=HTML"
  
  if [[ "$silent" == "true" ]]; then
    base_params="${base_params}&disable_notification=true"
  fi
  
  if [[ -n "$TELEGRAM_THREAD_ID" ]]; then
    local response=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
      -d "${base_params}&message_thread_id=${TELEGRAM_THREAD_ID}" 2>&1)
    
    if [[ $? -eq 0 ]] && [[ $response == *'"ok":true'* ]]; then
      return 0
    fi
  fi
  
  curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
    -d "$base_params" > /dev/null 2>&1
}

log_info() {
  echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
  echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
  echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
  echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

check_root() {
  if [[ $EUID -ne 0 ]]; then
    log_error "This command requires root privileges. Use sudo."
    exit 1
  fi
}

check_discourse() {
  if [[ ! -d "$DISCOURSE_PATH" ]]; then
    log_error "Discourse not found at $DISCOURSE_PATH"
    log_info "Set the path via DISCOURSE_PATH in .env file"
    exit 1
  fi
  
  if [[ ! -f "$LAUNCHER_PATH" ]]; then
    log_error "Launcher not found: $LAUNCHER_PATH"
    exit 1
  fi
}

get_container_status() {
  docker ps -a --filter "name=^${CONFIG_NAME}$" --format "{{.Status}}" 2>/dev/null
}

get_container_uptime() {
  docker ps --filter "name=^${CONFIG_NAME}$" --format "{{.Status}}" 2>/dev/null | grep -oE 'Up [^(]+'
}

get_discourse_version() {
  # Primary method: read from lib/version.rb (most reliable)
  local version=$(docker exec $CONFIG_NAME cat /var/www/discourse/lib/version.rb 2>/dev/null | grep -E "STRING = " | cut -d'"' -f2 2>/dev/null)
  
  # Fallback to API if file read fails
  if [[ -z "$version" ]]; then
    version=$(docker exec $CONFIG_NAME curl -s http://localhost/about.json 2>/dev/null | grep -o '"version":"[^"]*"' | cut -d'"' -f4 2>/dev/null)
  fi
  
  # Final fallback
  if [[ -z "$version" ]]; then
    version="unknown"
  fi
  
  echo "$version"
}

check_for_updates() {
  # Check if update check was done recently (cache for 24 hours)
  local cache_file="/tmp/.disco_update_check"
  local current_time=$(date +%s)
  
  if [[ -f "$cache_file" ]]; then
    local last_check=$(cat "$cache_file" 2>/dev/null || echo "0")
    local time_diff=$((current_time - last_check))
    # Skip check if less than 24 hours (86400 seconds)
    if [[ $time_diff -lt 86400 ]]; then
      return 0
    fi
  fi
  
  # Update cache timestamp
  echo "$current_time" > "$cache_file" 2>/dev/null
  
  # Check latest version from GitHub
  local latest_version=$(curl -s https://raw.githubusercontent.com/DigneZzZ/discourse-cli/main/disco | grep '^VERSION=' | head -1 | cut -d'"' -f2 2>/dev/null)
  
  if [[ -z "$latest_version" ]]; then
    return 0  # Silently fail if can't check
  fi
  
  # Compare versions
  if [[ "$latest_version" != "$VERSION" ]]; then
    echo ""
    echo -e "${YELLOW}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${YELLOW}‚ïë${NC}  ${BOLD}üì¶ Update Available!${NC}                                   ${YELLOW}‚ïë${NC}"
    echo -e "${YELLOW}‚ïë${NC}                                                            ${YELLOW}‚ïë${NC}"
    echo -e "${YELLOW}‚ïë${NC}  Current version: ${RED}$VERSION${NC}                                  ${YELLOW}‚ïë${NC}"
    echo -e "${YELLOW}‚ïë${NC}  Latest version:  ${GREEN}$latest_version${NC}                                 ${YELLOW}‚ïë${NC}"
    echo -e "${YELLOW}‚ïë${NC}                                                            ${YELLOW}‚ïë${NC}"
    echo -e "${YELLOW}‚ïë${NC}  Run: ${GREEN}disco self-update${NC} to update                         ${YELLOW}‚ïë${NC}"
    echo -e "${YELLOW}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
  fi
}

cmd_self_update() {
  log_info "Checking for updates..."
  
  local latest_version=$(curl -s https://raw.githubusercontent.com/DigneZzZ/discourse-cli/main/disco | grep '^VERSION=' | head -1 | cut -d'"' -f2 2>/dev/null)
  
  if [[ -z "$latest_version" ]]; then
    log_error "Failed to check for updates. Please check your internet connection."
    return 1
  fi
  
  if [[ "$latest_version" == "$VERSION" ]]; then
    log_success "You are already running the latest version (v$VERSION)"
    return 0
  fi
  
  echo ""
  log_info "Current version: v$VERSION"
  log_info "Latest version:  v$latest_version"
  echo ""
  
  read -p "$(echo -e ${CYAN}Do you want to update? [y/N]: ${NC})" -n 1 -r
  echo ""
  
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log_warning "Update cancelled"
    return 0
  fi
  
  log_info "Downloading latest version..."
  
  local temp_file="/tmp/disco_update_$$"
  
  if ! curl -fsSL -o "$temp_file" https://raw.githubusercontent.com/DigneZzZ/discourse-cli/main/disco; then
    log_error "Failed to download update"
    rm -f "$temp_file"
    return 1
  fi
  
  # Verify downloaded file
  if ! bash -n "$temp_file" 2>/dev/null; then
    log_error "Downloaded file is invalid"
    rm -f "$temp_file"
    return 1
  fi
  
  # Find current script location
  local script_path=$(which disco 2>/dev/null)
  if [[ -z "$script_path" ]]; then
    script_path="/usr/local/bin/disco"
  fi
  
  # Check if we need sudo
  if [[ ! -w "$script_path" ]] && [[ $EUID -ne 0 ]]; then
    log_info "Root privileges required to update..."
    if ! sudo mv "$temp_file" "$script_path"; then
      log_error "Failed to install update"
      rm -f "$temp_file"
      return 1
    fi
    sudo chmod +x "$script_path"
  else
    if ! mv "$temp_file" "$script_path"; then
      log_error "Failed to install update"
      rm -f "$temp_file"
      return 1
    fi
    chmod +x "$script_path"
  fi
  
  # Clear update check cache
  rm -f /tmp/.disco_update_check
  
  log_success "Successfully updated to v$latest_version!"
  echo ""
  log_info "Run 'disco version' to verify the update"
}

cmd_rebuild() {
  check_root
  check_discourse
  
  local start_time=$(date +%s)
  
  log_info "Starting rebuild of container '$CONFIG_NAME'..."
  send_telegram "üîß <b>Forum is going into maintenance</b>

‚è± Expected time: <b>~10 minutes</b>

We apologize for the temporary inconvenience."
  
  cd "$DISCOURSE_PATH" || exit 1
  
  if ./launcher rebuild "$CONFIG_NAME"; then
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    local minutes=$((duration / 60))
    local seconds=$((duration % 60))
    
    local version=$(get_discourse_version)
    
    log_success "Rebuild completed successfully in ${minutes}m ${seconds}s"
    send_telegram "‚úÖ <b>Forum is back online!</b>

‚è± Maintenance time: <b>${minutes}m ${seconds}s</b>
üîñ Version: <code>$version</code>

Thank you for your patience! üöÄ"
  else
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    log_error "Rebuild failed"
    send_telegram "‚ùå <b>Forum update failed</b>

‚è± Attempt duration: <b>$((duration / 60))m $((duration % 60))s</b>

‚ö†Ô∏è Administrator attention required!
Check logs: <code>disco logs</code>"
    exit 1
  fi
}

cmd_fast_rebuild() {
  check_root
  check_discourse
  
  log_info "Fast rebuild (without launcher update)..."
  send_telegram "‚ö°Ô∏è <b>Quick forum update</b>" true
  
  cd "$DISCOURSE_PATH" || exit 1
  
  local start_time=$(date +%s)
  
  if ./launcher rebuild "$CONFIG_NAME"; then
    local duration=$(( $(date +%s) - start_time ))
    log_success "Fast rebuild completed in $((duration / 60))m $((duration % 60))s"
    send_telegram "‚úÖ Update completed in <b>$((duration / 60))m $((duration % 60))s</b>" true
  else
    log_error "Rebuild failed"
    exit 1
  fi
}

cmd_start() {
  check_root
  check_discourse
  
  log_info "Starting container '$CONFIG_NAME'..."
  cd "$DISCOURSE_PATH" || exit 1
  
  if ./launcher start "$CONFIG_NAME"; then
    log_success "Container started"
    send_telegram "‚ñ∂Ô∏è Forum started" true
  else
    log_error "Failed to start container"
    exit 1
  fi
}

cmd_stop() {
  check_root
  check_discourse
  
  log_info "Stopping container '$CONFIG_NAME'..."
  send_telegram "‚è∏ Forum is shutting down..." true
  
  cd "$DISCOURSE_PATH" || exit 1
  
  if ./launcher stop "$CONFIG_NAME"; then
    log_success "Container stopped"
    send_telegram "‚èπ Forum stopped" true
  else
    log_error "Failed to stop container"
    exit 1
  fi
}

cmd_restart() {
  check_root
  check_discourse
  
  log_info "Restarting container '$CONFIG_NAME'..."
  send_telegram "üîÑ Forum is restarting..." true
  
  cd "$DISCOURSE_PATH" || exit 1
  
  if ./launcher restart "$CONFIG_NAME"; then
    log_success "Container restarted"
    send_telegram "‚úÖ Forum restarted successfully" true
  else
    log_error "Failed to restart container"
    exit 1
  fi
}

cmd_logs() {
  check_discourse
  
  local lines="${1:-100}"
  
  log_info "Last $lines lines of container '$CONFIG_NAME' logs:"
  docker logs --tail "$lines" -f "$CONFIG_NAME"
}

cmd_enter() {
  check_discourse
  
  log_info "Entering container '$CONFIG_NAME'..."
  cd "$DISCOURSE_PATH" || exit 1
  ./launcher enter "$CONFIG_NAME"
}

cmd_status() {
  check_discourse
  
  local status=$(get_container_status)
  local uptime=$(get_container_uptime)
  
  echo -e "\n${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
  echo -e "${BLUE}üìä Discourse Status${NC}"
  echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n"
  
  echo -e "üì¶ Container: ${GREEN}$CONFIG_NAME${NC}"
  
  if [[ -n "$status" ]]; then
    if [[ "$status" =~ "Up" ]]; then
      echo -e "üü¢ Status: ${GREEN}Running${NC}"
      echo -e "‚è±  Uptime: ${GREEN}$uptime${NC}"
      
      local version=$(get_discourse_version)
      echo -e "üîñ Version: ${GREEN}$version${NC}"
      
      local cpu=$(docker stats --no-stream --format "{{.CPUPerc}}" "$CONFIG_NAME" 2>/dev/null)
      local mem=$(docker stats --no-stream --format "{{.MemUsage}}" "$CONFIG_NAME" 2>/dev/null)
      
      if [[ -n "$cpu" ]]; then
        echo -e "üíª CPU: ${GREEN}$cpu${NC}"
        echo -e "üß† Memory: ${GREEN}$mem${NC}"
      fi
    else
      echo -e "üî¥ Status: ${RED}$status${NC}"
    fi
  else
    echo -e "üî¥ Status: ${RED}Container not found${NC}"
  fi
  
  echo -e "\n${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n"
}

cmd_backup() {
  check_root
  check_discourse
  
  local backup_name="${1:-manual-$(date +%Y%m%d-%H%M%S)}"
  
  log_info "Creating backup '$backup_name'..."
  send_telegram "üíæ <b>Creating backup</b>

üì¶ Name: <code>$backup_name</code>
‚è≥ This may take several minutes..." true
  
  docker exec -it "$CONFIG_NAME" discourse backup "$backup_name"
  
  if [[ $? -eq 0 ]]; then
    log_success "Backup created"
    send_telegram "‚úÖ <b>Backup created</b>

üì¶ Name: <code>$backup_name</code>
üìÅ Path: <code>/var/discourse/shared/standalone/backups/default/</code>" true
  else
    log_error "Backup creation failed"
    exit 1
  fi
}

cmd_cleanup() {
  check_root
  
  log_info "Checking Docker resources for cleanup..."
  
  echo ""
  echo -e "${BLUE}üìä Current Docker usage:${NC}"
  docker system df
  
  echo ""
  echo -e "${YELLOW}‚ö†Ô∏è  Will be removed:${NC}"
  echo "  ‚Ä¢ Stopped containers (older than 1 hour)"
  echo "  ‚Ä¢ Unused images (older than 1 hour)"
  echo "  ‚Ä¢ Unused volumes and networks"
  echo ""
  echo -e "${GREEN}‚úÖ Active container '$CONFIG_NAME' will NOT be affected${NC}"
  echo ""
  
  read -p "Continue cleanup? [y/N]: " -n 1 -r
  echo
  
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log_warning "Cleanup cancelled"
    exit 0
  fi
  
  log_info "Cleaning up unused Docker resources..."
  
  cd "$DISCOURSE_PATH" || exit 1
  ./launcher cleanup
  
  log_success "Cleanup completed"
  
  echo ""
  echo -e "${BLUE}üìä Usage after cleanup:${NC}"
  docker system df
}

cmd_update_launcher() {
  check_root
  check_discourse
  
  log_info "Updating launcher..."
  
  cd "$DISCOURSE_PATH" || exit 1
  
  git fetch origin
  local current=$(git rev-parse HEAD)
  local remote=$(git rev-parse @{u})
  
  if [[ "$current" == "$remote" ]]; then
    log_info "Launcher is already up to date"
  else
    git pull
    log_success "Launcher updated"
    send_telegram "üì• <b>Launcher updated</b>

üîÑ Rebuild recommended" true
  fi
}

cmd_test_telegram() {
  if [[ -z "$TELEGRAM_BOT_TOKEN" || -z "$TELEGRAM_CHAT_ID" ]]; then
    log_error "Telegram not configured!"
    log_info "Create .env file with settings:"
    echo ""
    echo "TELEGRAM_BOT_TOKEN=your_bot_token_here"
    echo "TELEGRAM_CHAT_ID=your_chat_id_here"
    echo "TELEGRAM_THREAD_ID=your_thread_id_here  # optional"
    echo ""
    log_info ".env file location: ~/.disco.env or /etc/disco/.env"
    exit 1
  fi
  
  log_info "Sending test message to Telegram..."
  
  send_telegram "üß™ <b>Test message</b>

‚úÖ Notifications are working correctly!
ü§ñ disco v${VERSION}
üìÖ $(date '+%Y-%m-%d %H:%M:%S')" false
  
  log_success "Test message sent"
}

cmd_monitor() {
  check_discourse
  
  log_info "Monitoring container '$CONFIG_NAME' (Ctrl+C to exit)..."
  docker stats "$CONFIG_NAME"
}

cmd_config() {
  check_discourse
  
  local config_file="${DISCOURSE_PATH}/containers/${CONFIG_NAME}.yml"
  
  if [[ -f "$config_file" ]]; then
    less "$config_file"
  else
    log_error "Configuration file not found: $config_file"
    exit 1
  fi
}

cmd_show_config() {
  echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
  echo -e "${BLUE}‚öôÔ∏è  disco Configuration${NC}"
  echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n"
  
  echo -e "üìÅ Discourse path: ${GREEN}$DISCOURSE_PATH${NC}"
  echo -e "üì¶ Container name: ${GREEN}$CONFIG_NAME${NC}"
  
  if [[ -n "$TELEGRAM_BOT_TOKEN" ]]; then
    echo -e "üì± Telegram: ${GREEN}Configured${NC}"
    echo -e "   Chat ID: ${GREEN}$TELEGRAM_CHAT_ID${NC}"
    if [[ -n "$TELEGRAM_THREAD_ID" ]]; then
      echo -e "   Thread ID: ${GREEN}$TELEGRAM_THREAD_ID${NC}"
    fi
  else
    echo -e "üì± Telegram: ${YELLOW}Not configured${NC}"
  fi
  
  echo ""
}

draw_header() {
  local status=$(get_container_status)
  local status_icon="üî¥"
  local status_text="Stopped"
  local status_color="$RED"
  
  if [[ "$status" =~ "Up" ]]; then
    status_icon="üü¢"
    status_text="Running"
    status_color="$GREEN"
  fi
  
  clear
  echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
  echo -e "${BLUE}‚ïë${NC}  ${BOLD}${GREEN}üöÄ Discourse Manager${NC} ${DIM}v${VERSION}${NC}                        ${BLUE}‚ïë${NC}"
  echo -e "${BLUE}‚ïë${NC}  üì¶ Container: ${CYAN}${CONFIG_NAME}${NC} | Status: ${status_color}${status_icon} ${status_text}${NC}          ${BLUE}‚ïë${NC}"
  echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
  echo ""
}

draw_separator() {
  echo -e "     ${DIM}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

show_interactive_menu() {
  # Initialize menu items
  MENU_ITEMS=(
    "üìä Show Status"
    "üîÑ Restart Container"
    "üìù View Logs (last 100 lines)"
    "üì∫ Live Monitor"
    "separator"
    "üîß Full Rebuild (with updates)"
    "‚ö° Fast Rebuild"
    "üíæ Create Backup"
    "üßπ Cleanup Docker Resources"
    "separator"
    "‚ñ∂Ô∏è  Start Container"
    "‚è∏Ô∏è  Stop Container"
    "üêö Enter Container Shell"
    "separator"
    "üì• Update Launcher"
    "üì± Test Telegram Notifications"
    "‚öôÔ∏è  Show Configuration"
    "üîÑ Update disco"
    "separator"
    "‚ùå Exit"
  )
  
  MENU_COMMANDS=(
    "status"
    "restart"
    "logs"
    "monitor"
    "separator"
    "rebuild"
    "fast-rebuild"
    "backup"
    "cleanup"
    "separator"
    "start"
    "stop"
    "enter"
    "separator"
    "update-launcher"
    "test-telegram"
    "show-config"
    "self-update"
    "separator"
    "exit"
  )
  
  MENU_REQUIRES_ROOT=(
    "false"
    "true"
    "false"
    "false"
    "false"
    "true"
    "true"
    "true"
    "true"
    "false"
    "true"
    "true"
    "false"
    "false"
    "true"
    "false"
    "false"
    "false"
    "false"
    "false"
  )
  
  MENU_REQUIRES_CONFIRM=(
    "false"
    "false"
    "false"
    "false"
    "false"
    "true"
    "false"
    "false"
    "true"
    "false"
    "false"
    "true"
    "false"
    "false"
    "false"
    "false"
    "false"
    "false"
    "false"
    "false"
  )
  
  while true; do
    draw_header
    
    # Draw menu items with numbers
    local index=1
    local menu_map=()
    
    for i in "${!MENU_ITEMS[@]}"; do
      if [[ "${MENU_ITEMS[$i]}" == "separator" ]]; then
        draw_separator
      else
        # Format number with proper padding
        local num_display
        if [[ $index -lt 10 ]]; then
          num_display=" $index"
        else
          num_display="$index"
        fi
        
        # Build menu item line
        local item_line="${GREEN}${num_display}.${NC}  ${MENU_ITEMS[$i]}"
        
        # Add warning icon for dangerous operations
        if [[ "${MENU_REQUIRES_CONFIRM[$i]}" == "true" ]]; then
          item_line="${item_line} ${RED}‚ö†${NC}"
        fi
        
        echo -e "$item_line"
        menu_map[$index]=$i
        ((index++))
      fi
    done
    
    draw_separator
    echo -e "${GREEN} 0.${NC}  ‚ùå Exit"
    
    echo ""
    echo -e "${YELLOW}Enter your choice [0-$((index-1))] or 'q' to quit:${NC} "
    read -r choice
    
    # Handle choice
    case "$choice" in
      0|q|Q)
        clear
        echo -e "${GREEN}üëã Goodbye!${NC}"
        exit 0
        ;;
      ''|*[!0-9]*)
        log_error "Invalid input. Please enter a number."
        sleep 1
        continue
        ;;
      *)
        if [[ $choice -lt 1 || $choice -ge $index ]]; then
          log_error "Invalid choice. Please enter a number between 0 and $((index-1))"
          sleep 1
          continue
        fi
        
        local selected_index="${menu_map[$choice]}"
        local selected_command="${MENU_COMMANDS[$selected_index]}"
        
        # Check if requires root
        if [[ "${MENU_REQUIRES_ROOT[$selected_index]}" == "true" ]] && [[ $EUID -ne 0 ]]; then
          clear
          log_error "This action requires root privileges"
          echo ""
          echo -e "${YELLOW}Please run: ${GREEN}sudo disco${NC}"
          echo ""
          read -p "Press Enter to continue..."
          continue
        fi
        
        # Check if requires confirmation
        if [[ "${MENU_REQUIRES_CONFIRM[$selected_index]}" == "true" ]]; then
          clear
          echo -e "${YELLOW}‚ö†Ô∏è  WARNING: ${MENU_ITEMS[$selected_index]}${NC}"
          echo ""
          
          case "$selected_command" in
            rebuild)
              echo -e "This will:"
              echo -e "  ‚Ä¢ Update Discourse to the latest version"
              echo -e "  ‚Ä¢ Rebuild the entire container"
              echo -e "  ‚Ä¢ Take approximately 10 minutes"
              echo -e "  ‚Ä¢ Make the forum ${RED}temporarily unavailable${NC}"
              ;;
            stop)
              echo -e "This will:"
              echo -e "  ‚Ä¢ Stop the Discourse container"
              echo -e "  ‚Ä¢ Make the forum ${RED}unavailable${NC} until restarted"
              ;;
            cleanup)
              echo -e "This will:"
              echo -e "  ‚Ä¢ Remove stopped containers"
              echo -e "  ‚Ä¢ Remove unused Docker images"
              echo -e "  ‚Ä¢ Free up disk space"
              ;;
          esac
          
          echo ""
          read -p "Are you sure? Type 'yes' to confirm: " confirm
          
          if [[ "$confirm" != "yes" ]]; then
            log_warning "Action cancelled"
            echo ""
            read -p "Press Enter to continue..."
            continue
          fi
        fi
        
        # Execute command
        clear
        execute_menu_command "$selected_command"
        
        echo ""
        echo -e "${DIM}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        read -p "Press Enter to return to menu..."
        ;;
    esac
  done
}

execute_menu_command() {
  local command=$1
  
  case "$command" in
    status)
      cmd_status
      ;;
    restart)
      cmd_restart
      ;;
    logs)
      log_info "Showing last 100 lines (press Ctrl+C to exit)..."
      sleep 1
      cmd_logs 100
      ;;
    monitor)
      cmd_monitor
      ;;
    rebuild)
      cmd_rebuild
      ;;
    fast-rebuild)
      cmd_fast_rebuild
      ;;
    backup)
      local backup_name="manual-$(date +%Y%m%d-%H%M%S)"
      cmd_backup "$backup_name"
      ;;
    cleanup)
      cmd_cleanup
      ;;
    start)
      cmd_start
      ;;
    stop)
      cmd_stop
      ;;
    enter)
      cmd_enter
      ;;
    update-launcher)
      cmd_update_launcher
      ;;
    test-telegram)
      cmd_test_telegram
      ;;
    show-config)
      cmd_show_config
      ;;
    self-update)
      cmd_self_update
      ;;
  esac
}

show_help() {
  echo -e "${GREEN}disco${NC} - Discourse Launcher Management Tool v${VERSION}\n"
  echo -e "${BLUE}Usage:${NC}"
  echo -e "  disco                       Launch interactive menu ${CYAN}(recommended)${NC}"
  echo -e "  disco <command> [options]   Run specific command\n"
  
  echo -e "${BLUE}Management commands:${NC}"
  echo -e "  ${GREEN}re, rebuild${NC}           Full container rebuild (with updates)"
  echo -e "  ${GREEN}fast-rebuild${NC}          Quick rebuild without launcher update"
  echo -e "  ${GREEN}start${NC}                 Start container"
  echo -e "  ${GREEN}stop${NC}                  Stop container"
  echo -e "  ${GREEN}restart${NC}               Restart container"
  echo -e "  ${GREEN}enter${NC}                 Enter container (shell)\n"
  
  echo -e "${BLUE}Information commands:${NC}"
  echo -e "  ${GREEN}status, st${NC}            Show container status"
  echo -e "  ${GREEN}logs [N]${NC}              Show last N lines of logs (default 100)"
  echo -e "  ${GREEN}monitor${NC}               Real-time resource monitoring"
  echo -e "  ${GREEN}config${NC}                Show container configuration"
  echo -e "  ${GREEN}show-config${NC}           Show disco configuration\n"
  
  echo -e "${BLUE}Maintenance commands:${NC}"
  echo -e "  ${GREEN}backup [name]${NC}         Create backup"
  echo -e "  ${GREEN}cleanup${NC}               Clean unused Docker resources"
  echo -e "  ${GREEN}update-launcher${NC}       Update launcher to latest version\n"
  
  echo -e "${BLUE}Utilities:${NC}"
  echo -e "  ${GREEN}test-telegram${NC}         Send test Telegram notification"
  echo -e "  ${GREEN}self-update${NC}           Update disco to latest version"
  echo -e "  ${GREEN}help, -h, --help${NC}      Show this help"
  echo -e "  ${GREEN}version, -v${NC}           Show version\n"
  
  echo -e "${BLUE}Configuration (.env file):${NC}"
  echo -e "  Create ${GREEN}~/.disco.env${NC} or ${GREEN}/etc/disco/.env${NC} with settings:"
  echo -e "    DISCOURSE_PATH=/var/discourse"
  echo -e "    CONFIG_NAME=app"
  echo -e "    TELEGRAM_BOT_TOKEN=your_token"
  echo -e "    TELEGRAM_CHAT_ID=your_chat_id"
  echo -e "    TELEGRAM_THREAD_ID=your_thread_id  # optional\n"
  
  echo -e "${BLUE}Examples:${NC}"
  echo -e "  disco                       # Launch interactive menu"
  echo -e "  sudo disco                  # Launch menu with root privileges"
  echo -e "  disco re                    # Full rebuild with notifications"
  echo -e "  disco status                # Check status"
  echo -e "  disco logs 500              # Show 500 lines of logs"
  echo -e "  disco backup my-backup      # Create backup\n"
  
  echo -e "${YELLOW}üí° Tip:${NC} Run ${GREEN}disco${NC} without arguments for the interactive menu!"
}

main() {
  # Check for updates on startup (once per 24 hours)
  check_for_updates
  
  # If no arguments, show interactive menu
  if [[ $# -eq 0 ]]; then
    check_discourse
    show_interactive_menu
    exit 0
  fi
  
  local command="$1"
  shift
  
  case "$command" in
    menu|interactive|m)
      check_discourse
      show_interactive_menu
      ;;
    re|rebuild)
      cmd_rebuild "$@"
      ;;
    fast-rebuild|fast)
      cmd_fast_rebuild "$@"
      ;;
    start)
      cmd_start "$@"
      ;;
    stop)
      cmd_stop "$@"
      ;;
    restart)
      cmd_restart "$@"
      ;;
    logs)
      cmd_logs "$@"
      ;;
    enter|shell)
      cmd_enter "$@"
      ;;
    status|st)
      cmd_status "$@"
      ;;
    backup)
      cmd_backup "$@"
      ;;
    cleanup|clean)
      cmd_cleanup "$@"
      ;;
    update-launcher|update)
      cmd_update_launcher "$@"
      ;;
    test-telegram|test)
      cmd_test_telegram "$@"
      ;;
    monitor|mon)
      cmd_monitor "$@"
      ;;
    config|conf)
      cmd_config "$@"
      ;;
    show-config)
      cmd_show_config "$@"
      ;;
    self-update|update-disco)
      cmd_self_update "$@"
      ;;
    help|-h|--help)
      show_help
      ;;
    version|-v|--version)
      echo "disco v${VERSION}"
      check_for_updates
      ;;
    *)
      log_error "Unknown command: $command"
      echo ""
      show_help
      exit 1
      ;;
  esac
}

main "$@"
